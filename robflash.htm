<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RM-01 robOS Âõ∫‰ª∂ÁÉßÂΩïÂô®</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(90deg, #4CAF50, #45a049);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .main-content {
            padding: 40px;
        }

        .section {
            margin-bottom: 30px;
            padding: 25px;
            border: 2px solid #f0f0f0;
            border-radius: 15px;
            background: #fafafa;
        }

        .section h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .file-input-group {
            margin-bottom: 20px;
        }

        .file-input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .file-input-container {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            width: 100%;
            padding: 12px;
            border: 2px dashed #ddd;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-input:hover {
            border-color: #4CAF50;
            background: #f8fff8;
        }

        .file-status {
            margin-top: 8px;
            font-size: 0.9em;
            color: #666;
        }

        .file-selected {
            color: #4CAF50;
            font-weight: 600;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(90deg, #4CAF50, #45a049);
            color: white;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

        .btn-warning {
            background: linear-gradient(90deg, #ffc107, #e0a800);
            color: #212529;
            font-weight: 700;
            box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
        }

        .btn-warning:hover {
            background: linear-gradient(90deg, #e0a800, #d39e00);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 193, 7, 0.4);
        }

        .btn-danger {
            background: linear-gradient(90deg, #dc3545, #c82333);
            color: white;
            font-weight: 700;
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
            margin-right: 10px;
        }

        .btn-danger:hover {
            background: linear-gradient(90deg, #c82333, #bd2130);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
        }

        .btn-success {
            background: linear-gradient(90deg, #28a745, #218838);
            color: white;
            font-weight: 700;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .btn-success:hover {
            background: linear-gradient(90deg, #218838, #1e7e34);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }

        .btn:disabled {
            background: #ccc !important;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
            color: #666 !important;
        }

        .progress-container {
            margin-top: 20px;
            display: none;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            width: 0%;
            transition: width 0.3s ease;
        }

        .log-container {
            margin-top: 20px;
            max-height: 300px;
            overflow-y: auto;
            background: #1e1e1e;
            color: #00ff00;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.4;
        }

        .log-entry {
            margin-bottom: 5px;
        }

        .error {
            color: #ff4444;
        }

        .success {
            color: #44ff44;
        }

        .warning {
            color: #ffaa44;
        }

        .flash-settings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .setting-group {
            display: flex;
            flex-direction: column;
        }

        .setting-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }

        .setting-group select {
            padding: 8px;
            border: 2px solid #ddd;
            border-radius: 5px;
            background: white;
        }

        .setting-group select:focus {
            border-color: #4CAF50;
            outline: none;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .flashing {
            animation: pulse 2s infinite;
        }

        /* ‰∏≤Âè£ÈÄâÊã©Áõ∏ÂÖ≥Ê†∑Âºè */
        .port-item {
            padding: 12px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background-color 0.2s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .port-item:last-child {
            border-bottom: none;
        }

        .port-item:hover {
            background-color: #f8f9fa;
        }

        .port-item.selected {
            background-color: #e7f3ff;
            border-left: 4px solid #4CAF50;
        }

        .port-info {
            flex: 1;
        }

        .port-path {
            font-weight: 600;
            color: #333;
        }

        .port-details {
            font-size: 0.9em;
            color: #666;
            margin-top: 2px;
        }

        .port-badge {
            background: #4CAF50;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üî• RM-01 robOS Flasher</h1>
            <p>Rack on board OS ÊùøËΩΩÊú∫ÊüúÊìç‰ΩúÁ≥ªÁªü</p>
        </div>
        
        <div class="main-content">
            <!-- ËÆæÂ§áËøûÊé•‰∏éÁÉßÂΩï -->
            <div class="section" style="display: none;">
                <h3>ÔøΩ RM-01 Âõ∫‰ª∂ÁÉßÂΩï</h3>
                

                
                <!-- ËÆæÂ§á‰ø°ÊÅØ -->
                <div id="deviceInfo" style="margin-bottom: 20px; color: #666;"></div>
                
                <!-- ÈöêËóèÁöÑÁä∂ÊÄÅÂÖÉÁ¥†ÔºåÁî®‰∫éÂêéÂè∞Ê£ÄÊü• -->
                <div style="display: none;">
                    <div id="firmwareStatus"></div>
                    <div id="bootloaderStatus"></div>
                    <div id="partitionStatus"></div>
                    <div id="applicationStatus"></div>
                </div>
            </div>

            <!-- Êó•ÂøóËæìÂá∫ -->
            <div class="section">
                <h3>üìã Êìç‰ΩúÊó•Âøó</h3>
                <div class="log-container" id="logContainer">
                    <div class="log-entry">Á≠âÂæÖËøûÊé•ËÆæÂ§á...</div>
                </div>
                
                <!-- ËøõÂ∫¶Êù°ÊîæÂú®Êó•ÂøóÊ°Ü‰∏ãÈù¢ -->
                <div class="progress-container" id="progressContainer">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div id="progressText">ÂáÜÂ§á‰∏≠...</div>
                </div>
                
                <!-- ‰∏≤Âè£ÈÄâÊã©Âå∫Âüü -->
                <div id="portSelectionArea" style="margin-top: 15px; display: none;">
                    <div style="margin-bottom: 15px;">
                        <h4 style="margin-bottom: 10px; color: #333;">ÈÄâÊã©‰∏≤Âè£ËÆæÂ§áÔºö</h4>
                        <div id="portList" style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; background: white;">
                            <div id="portListContent" style="padding: 10px;">
                                <div style="text-align: center; color: #666; padding: 20px;">Ê≠£Âú®Êâ´Êèè‰∏≤Âè£ËÆæÂ§á...</div>
                            </div>
                        </div>
                        <div style="margin-top: 10px; display: flex; gap: 10px;">
                            <button id="refreshPortsBtn" class="btn" style="background: #17a2b8; color: white; padding: 8px 16px;">üîÑ Âà∑Êñ∞ÂàóË°®</button>
                            <button id="cancelPortBtn" class="btn" style="background: #6c757d; color: white; padding: 8px 16px;">‚ùå ÂèñÊ∂à</button>
                        </div>
                    </div>
                </div>

                <!-- ÊâÄÊúâÊåâÈíÆÊîæÂú®ËøõÂ∫¶Êù°‰∏ãÈù¢Êàê‰∏ÄË°å -->
                <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                    <button id="connectBtn" class="btn btn-primary">üîå Ëá™Âä®ËøûÊé•</button>
                    <button id="manualConnectBtn" class="btn" style="background: #6c757d; color: white;">üîç ÊâãÂä®ÈÄâÊã©</button>
                    <button id="flashBtn" class="btn btn-primary" disabled>üî• ÁÉßÂΩïÂõ∫‰ª∂</button>
                    <button id="eraseBtn" class="btn btn-danger" disabled>üóëÔ∏è Êì¶Èô§Flash</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ES6 Ê®°ÂùóÊñπÂºèÂä†ËΩΩ esptool-js -->
    <script type="module">
        import { ESPLoader, Transport } from './esptool-complete.js';

        class RM01Flasher {
            constructor() {
                this.esploader = null;
                this.port = null;
                this.connected = false;
                this.files = {
                    bootloader: null,
                    partition: null,
                    application: null
                };
                
                this.initializeElements();
                this.attachEventListeners();
            }

            initializeElements() {
                this.connectBtn = document.getElementById('connectBtn');
                this.manualConnectBtn = document.getElementById('manualConnectBtn');
                this.deviceInfo = document.getElementById('deviceInfo');
                
                this.firmwareStatus = document.getElementById('firmwareStatus');
                
                this.bootloaderStatus = document.getElementById('bootloaderStatus');
                this.partitionStatus = document.getElementById('partitionStatus');
                this.applicationStatus = document.getElementById('applicationStatus');
                
                this.flashBtn = document.getElementById('flashBtn');
                this.eraseBtn = document.getElementById('eraseBtn');
                
                this.progressContainer = document.getElementById('progressContainer');
                this.progressFill = document.getElementById('progressFill');
                this.progressText = document.getElementById('progressText');
                
                this.logContainer = document.getElementById('logContainer');
                
                // ‰∏≤Âè£ÈÄâÊã©Áõ∏ÂÖ≥ÂÖÉÁ¥†
                this.portSelectionArea = document.getElementById('portSelectionArea');
                this.portListContent = document.getElementById('portListContent');
                this.refreshPortsBtn = document.getElementById('refreshPortsBtn');
                this.cancelPortBtn = document.getElementById('cancelPortBtn');
                
                this.selectedPort = null;
                this.availablePorts = [];
                
                // FlashÂèÇÊï∞Âõ∫ÂÆöÔºåÊó†ÈúÄUIÂÖÉÁ¥†
            }

            attachEventListeners() {
                this.connectBtn.addEventListener('click', () => this.toggleConnection());
                this.manualConnectBtn.addEventListener('click', () => this.manualConnect());
                this.flashBtn.addEventListener('click', () => this.flashFirmware());
                this.eraseBtn.addEventListener('click', () => this.eraseFlash());
                
                // ‰∏≤Âè£ÈÄâÊã©‰∫ã‰ª∂
                this.refreshPortsBtn.addEventListener('click', () => this.refreshPortList());
                this.cancelPortBtn.addEventListener('click', () => this.hidePortSelection(true));
                
                // Ëá™Âä®Âä†ËΩΩÂõ∫‰ª∂Êñá‰ª∂
                this.loadFirmwareFiles();
            }

            log(message, type = 'info') {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.className = `log-entry ${type}`;
                logEntry.textContent = `[${timestamp}] ${message}`;
                
                this.logContainer.appendChild(logEntry);
                this.logContainer.scrollTop = this.logContainer.scrollHeight;
            }

            async toggleConnection() {
                if (this.connected) {
                    await this.disconnectDevice();
                } else {
                    await this.autoDetectAndConnect();
                }
            }

            // ÊâãÂä®ËøûÊé• - ÊòæÁ§∫Á´ØÂè£ÈÄâÊã©ÁïåÈù¢
            async manualConnect() {
                if (this.connected) {
                    await this.disconnectDevice();
                } else {
                    await this.showPortSelection();
                }
            }

            // ÊòæÁ§∫‰∏≤Âè£ÈÄâÊã©ÁïåÈù¢
            async showPortSelection() {
                this.portSelectionArea.style.display = 'block';
                this.connectBtn.disabled = true;
                await this.refreshPortList();
            }

            // ÈöêËóè‰∏≤Âè£ÈÄâÊã©ÁïåÈù¢
            hidePortSelection(clearSelection = false) {
                this.portSelectionArea.style.display = 'none';
                this.connectBtn.disabled = false;
                if (clearSelection) {
                    this.selectedPort = null;
                }
            }

            // Âà∑Êñ∞‰∏≤Âè£ÂàóË°®
            async refreshPortList() {
                try {
                    this.portListContent.innerHTML = '<div style="text-align: center; color: #666; padding: 20px;">Ê≠£Âú®Êâ´Êèè‰∏≤Âè£ËÆæÂ§á...</div>';
                    
                    if (!navigator.serial) {
                        throw new Error('ÊµèËßàÂô®‰∏çÊîØÊåÅ Web Serial API');
                    }

                    // Ëé∑ÂèñÂ∑≤ÊéàÊùÉÁöÑ‰∏≤Âè£
                    this.availablePorts = await navigator.serial.getPorts();
                    
                    if (this.availablePorts.length === 0) {
                        this.portListContent.innerHTML = `
                            <div style="text-align: center; color: #666; padding: 20px;">
                                <p>Êú™ÂèëÁé∞‰∏≤Âè£ËÆæÂ§á</p>
                                <p style="font-size: 0.9em; margin-top: 10px;">ÁÇπÂáª‰∏ãÈù¢ÁöÑÊåâÈíÆÊù•Ê∑ªÂä†Êñ∞ËÆæÂ§áÔºö</p>
                                <button id="addPortBtn" class="btn btn-primary" style="margin-top: 10px;">‚ûï Ê∑ªÂä†‰∏≤Âè£ËÆæÂ§á</button>
                            </div>
                        `;
                        
                        document.getElementById('addPortBtn').addEventListener('click', async () => {
                            try {
                                const port = await navigator.serial.requestPort();
                                this.availablePorts.push(port);
                                await this.refreshPortList();
                            } catch (error) {
                                if (error.message.includes('No port selected')) {
                                    this.log('Áî®Êà∑ÂèñÊ∂à‰∫Ü‰∏≤Âè£ÈÄâÊã©', 'warning');
                                } else {
                                    this.log(`Ê∑ªÂä†‰∏≤Âè£ËÆæÂ§áÂ§±Ë¥•: ${error.message}`, 'error');
                                }
                            }
                        });
                        
                        return;
                    }

                    // ÊòæÁ§∫‰∏≤Âè£ÂàóË°®
                    this.portListContent.innerHTML = '';
                    
                    for (let i = 0; i < this.availablePorts.length; i++) {
                        const port = this.availablePorts[i];
                        const info = port.getInfo();
                        
                        const portItem = document.createElement('div');
                        portItem.className = 'port-item';
                        portItem.dataset.portIndex = i;
                        
                        // Âà§Êñ≠ÊòØÂê¶ÂèØËÉΩÊòØESP32ËÆæÂ§áÂíåËé∑ÂèñËÆæÂ§áÊèèËø∞
                        const isESP32 = this.isLikelyESP32Port(info);
                        const deviceName = this.getDeviceName(info);
                        const deviceDescription = this.getDeviceDescription(info);
                        
                        portItem.innerHTML = `
                            <div class="port-info">
                                <div class="port-path">${deviceName}</div>
                                <div class="port-details">
                                    ${deviceDescription}
                                </div>
                            </div>
                            ${isESP32 ? '<div class="port-badge">ESP32</div>' : ''}
                        `;
                        
                        portItem.addEventListener('click', () => this.selectPort(i));
                        this.portListContent.appendChild(portItem);
                    }
                    
                } catch (error) {
                    this.portListContent.innerHTML = `
                        <div style="text-align: center; color: #dc3545; padding: 20px;">
                            <p>Êâ´Êèè‰∏≤Âè£ËÆæÂ§áÂ§±Ë¥•</p>
                            <p style="font-size: 0.9em; margin-top: 5px;">${error.message}</p>
                        </div>
                    `;
                }
            }

            // Âà§Êñ≠ÊòØÂê¶ÂèØËÉΩÊòØESP32ËÆæÂ§á
            isLikelyESP32Port(info) {
                const knownESP32Vendors = [
                    0x10c4, // Silicon Labs (CP210x)
                    0x1a86, // QinHeng Electronics (CH340)
                    0x0403, // FTDI
                    0x067b  // Prolific
                ];
                
                return info.usbVendorId && knownESP32Vendors.includes(info.usbVendorId);
            }

            // Ëé∑ÂèñËÆæÂ§áÂêçÁß∞
            getDeviceName(info) {
                const vendorNames = {
                    0x10c4: 'Silicon Labs CP210x USB to UART Bridge',
                    0x1a86: 'QinHeng CH340 USB Serial',
                    0x0403: 'FTDI USB Serial Device',
                    0x067b: 'Prolific USB-to-Serial Comm Port',
                    0x2341: 'Arduino Device',
                    0x1b4f: 'SparkFun Device'
                };

                if (info.usbVendorId && vendorNames[info.usbVendorId]) {
                    return vendorNames[info.usbVendorId];
                }

                if (info.usbVendorId) {
                    return `USB Serial Device (VID: 0x${info.usbVendorId.toString(16).padStart(4, '0')})`;
                }

                return 'Serial Device';
            }

            // Ëé∑ÂèñËÆæÂ§áËØ¶ÁªÜÊèèËø∞
            getDeviceDescription(info) {
                const parts = [];
                
                if (info.usbVendorId) {
                    parts.push(`VID: 0x${info.usbVendorId.toString(16).padStart(4, '0')}`);
                }
                
                if (info.usbProductId) {
                    parts.push(`PID: 0x${info.usbProductId.toString(16).padStart(4, '0')}`);
                }

                // Ê∑ªÂä†Â∏∏ËßÅËäØÁâáÁöÑ‰∫ßÂìÅÊèèËø∞
                const productDescriptions = {
                    0x10c4: {
                        0xea60: 'CP2102/CP2109 USB to UART Bridge Controller'
                    },
                    0x1a86: {
                        0x7523: 'CH340 USB-to-Serial converter',
                        0x55d4: 'CH341 USB-to-Serial converter'
                    },
                    0x0403: {
                        0x6001: 'FT232R USB UART',
                        0x6014: 'FT232H Single HS USB-UART/FIFO IC'
                    }
                };

                if (info.usbVendorId && info.usbProductId && productDescriptions[info.usbVendorId] && productDescriptions[info.usbVendorId][info.usbProductId]) {
                    parts.push(productDescriptions[info.usbVendorId][info.usbProductId]);
                }

                return parts.length > 0 ? parts.join(' | ') : '‰∏≤Âè£ËÆæÂ§á';
            }

            // ÈÄâÊã©‰∏≤Âè£
            selectPort(portIndex) {
                // Ê∏ÖÈô§‰πãÂâçÁöÑÈÄâÊã©
                document.querySelectorAll('.port-item').forEach(item => {
                    item.classList.remove('selected');
                });
                
                // ÈÄâÊã©ÂΩìÂâçÈ°π
                const selectedItem = document.querySelector(`[data-port-index="${portIndex}"]`);
                selectedItem.classList.add('selected');
                
                this.selectedPort = this.availablePorts[portIndex];
                
                // Á´ãÂç≥ËøûÊé•ÈÄâÂÆöÁöÑ‰∏≤Âè£
                this.connectToSelectedPort();
            }

            // Ëá™Âä®Ê£ÄÊµãÂπ∂ËøûÊé•RM-01ËÆæÂ§á
            async autoDetectAndConnect() {
                try {
                    this.connectBtn.disabled = true;
                    this.connectBtn.textContent = 'üîç Ëá™Âä®Ê£ÄÊµã‰∏≠...';
                    this.connectBtn.classList.add('flashing');
                    
                    this.log('üöÄ ÂºÄÂßãËá™Âä®Ê£ÄÊµã RM-01 ËÆæÂ§á...', 'info');
                    
                    if (!navigator.serial) {
                        throw new Error('ÊµèËßàÂô®‰∏çÊîØÊåÅ Web Serial API');
                    }

                    // Ëé∑ÂèñÂ∑≤ÊéàÊùÉÁöÑ‰∏≤Âè£
                    this.availablePorts = await navigator.serial.getPorts();
                    
                    if (this.availablePorts.length === 0) {
                        this.log('‚ùå Êú™ÂèëÁé∞‰ªª‰Ωï‰∏≤Âè£ËÆæÂ§á', 'warning');
                        this.log('üí° ËØ∑Á°Æ‰øùÔºö', 'info');
                        this.log('   1. RM-01 ËÆæÂ§áÂ∑≤ÈÄöËøáUSBËøûÊé•Âà∞ÁîµËÑë', 'info');
                        this.log('   2. ËÆæÂ§áÈ©±Âä®Â∑≤Ê≠£Á°ÆÂÆâË£Ö', 'info');
                        this.log('   3. ÁÇπÂáª"Ê∑ªÂä†‰∏≤Âè£ËÆæÂ§á"ÊåâÈíÆÊéàÊùÉËÆøÈóÆ', 'info');
                        
                        await this.showPortSelection();
                        return;
                    }

                    this.log(`üîå ÂèëÁé∞ ${this.availablePorts.length} ‰∏™‰∏≤Âè£ËÆæÂ§áÔºåÂºÄÂßãÈÄê‰∏ÄÊ£ÄÊµã...`, 'info');
                    
                    // Êåâ‰ºòÂÖàÁ∫ßÊéíÂ∫èÁ´ØÂè£ÔºàESP32Áõ∏ÂÖ≥ËÆæÂ§á‰ºòÂÖàÔºâ
                    const sortedPorts = this.availablePorts
                        .map((port, index) => ({ port, index, info: port.getInfo() }))
                        .sort((a, b) => {
                            const aIsESP32 = this.isLikelyESP32Port(a.info);
                            const bIsESP32 = this.isLikelyESP32Port(b.info);
                            if (aIsESP32 && !bIsESP32) return -1;
                            if (!aIsESP32 && bIsESP32) return 1;
                            return 0;
                        });

                    // ‰æùÊ¨°Â∞ùËØïÊØè‰∏™Á´ØÂè£
                    for (let i = 0; i < sortedPorts.length; i++) {
                        const { port, index, info } = sortedPorts[i];
                        const deviceName = this.getDeviceName(info);
                        const isESP32 = this.isLikelyESP32Port(info);
                        
                        this.log(`üîç Ê£ÄÊµãÁ´ØÂè£ ${i + 1}/${sortedPorts.length}: ${deviceName} ${isESP32 ? '(ESP32ËÆæÂ§á)' : ''}`, 'info');
                        
                        const success = await this.tryConnectToPort(port, deviceName);
                        if (success) {
                            this.log(`‚úÖ ÊàêÂäüËøûÊé•Âà∞ RM-01 ËÆæÂ§áÔºÅ‰ΩøÁî®Á´ØÂè£: ${deviceName}`, 'success');
                            this.selectedPort = port;
                            return;
                        }
                        
                        // Â¶ÇÊûú‰∏çÊòØÊúÄÂêé‰∏Ä‰∏™Á´ØÂè£ÔºåÁ≠âÂæÖ‰∏ÄÂ∞èÊÆµÊó∂Èó¥ÂÜçËØï‰∏ã‰∏Ä‰∏™
                        if (i < sortedPorts.length - 1) {
                            await this.sleep(500);
                        }
                    }
                    
                    // ÊâÄÊúâÁ´ØÂè£ÈÉΩÂ∞ùËØïÂ§±Ë¥•
                    this.log('‚ùå Êú™ËÉΩÂú®‰ªª‰Ωï‰∏≤Âè£‰∏äÊ£ÄÊµãÂà∞ RM-01 ËÆæÂ§á', 'error');
                    this.log('üí° ËØ∑Ê£ÄÊü•Ôºö', 'info');
                    this.log('   1. ËÆæÂ§áÊòØÂê¶Â§Ñ‰∫é‰∏ãËΩΩÊ®°ÂºèÔºàÊåâ‰ΩèBOOTÈîÆÂêéÊåâRESETÈîÆÔºâ', 'info');
                    this.log('   2. USBËøûÊé•ÊòØÂê¶Á®≥ÂÆö', 'info');
                    this.log('   3. ËÆæÂ§áÈ©±Âä®ÊòØÂê¶Ê≠£Á°ÆÂÆâË£Ö', 'info');
                    
                    await this.showPortSelection();
                    
                } catch (error) {
                    this.log(`Ëá™Âä®Ê£ÄÊµãÂ§±Ë¥•: ${error.message}`, 'error');
                    await this.showPortSelection();
                } finally {
                    // Â¶ÇÊûúÊ≤°ÊúâÊàêÂäüËøûÊé•ÔºåÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
                    if (!this.connected) {
                        this.connectBtn.disabled = false;
                        this.connectBtn.textContent = 'üîå Ëá™Âä®ËøûÊé•';
                        this.connectBtn.classList.remove('flashing');
                        this.manualConnectBtn.disabled = false;
                    }
                }
            }

            // Â∞ùËØïËøûÊé•ÊåáÂÆöÁ´ØÂè£
            async tryConnectToPort(port, deviceName) {
                let transport = null;
                let esploader = null;
                
                try {
                    // ÂàõÂª∫transportËøûÊé•
                    transport = new Transport(port);
                    esploader = new ESPLoader({
                        transport: transport,
                        baudrate: 115200
                    });

                    // ËÆæÁΩÆ1ÁßíË∂ÖÊó∂
                    const connectPromise = esploader.main();
                    const timeoutPromise = new Promise((_, reject) => {
                        setTimeout(() => reject(new Error('ËøûÊé•Ë∂ÖÊó∂')), 1000);
                    });

                    // Â∞ùËØïËøûÊé•Ôºå1ÁßíË∂ÖÊó∂
                    await Promise.race([connectPromise, timeoutPromise]);
                    
                    // È™åËØÅÊòØÂê¶‰∏∫ESP32ËÆæÂ§á
                    const chipName = await esploader.chip.getChipDescription(esploader);
                    if (chipName.toLowerCase().includes('esp32')) {
                        // ÊàêÂäüÊâæÂà∞ESP32ËÆæÂ§áÔºå‰øùÂ≠òËøûÊé•Áä∂ÊÄÅ
                        this.port = port;
                        this.esploader = esploader;
                        this.connected = true;
                        
                        // Ëé∑ÂèñËÆæÂ§á‰ø°ÊÅØ
                        const macAddr = await esploader.chip.readMac(esploader);
                        this.updateDeviceInfo(chipName, macAddr, deviceName);
                        this.updateUIConnected();
                        
                        return true;
                    } else {
                        this.log(`   ‚ö†Ô∏è  ËÆæÂ§áÂìçÂ∫î‰ΩÜ‰∏çÊòØESP32: ${chipName}`, 'warning');
                        await this.cleanupConnection(transport, esploader);
                        return false;
                    }
                    
                } catch (error) {
                    if (error.message.includes('ËøûÊé•Ë∂ÖÊó∂')) {
                        this.log(`   ‚è±Ô∏è  ${deviceName}: ËøûÊé•Ë∂ÖÊó∂ÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™Á´ØÂè£`, 'warning');
                    } else {
                        this.log(`   ‚ùå ${deviceName}: ${error.message}`, 'warning');
                    }
                    
                    await this.cleanupConnection(transport, esploader);
                    return false;
                }
            }

            // Ê∏ÖÁêÜËøûÊé•ËµÑÊ∫ê
            async cleanupConnection(transport, esploader) {
                try {
                    if (esploader && esploader.transport) {
                        await esploader.transport.disconnect();
                    } else if (transport) {
                        await transport.disconnect();
                    }
                } catch (error) {
                    // ÂøΩÁï•Ê∏ÖÁêÜÈîôËØØ
                }
            }

            // ËøûÊé•Âà∞ÈÄâÂÆöÁöÑ‰∏≤Âè£
            async connectToSelectedPort() {
                if (!this.selectedPort) return;
                
                try {
                    this.hidePortSelection();
                    await this.connectDevice();
                } catch (error) {
                    this.log(`ËøûÊé•Â§±Ë¥•: ${error.message}`, 'error');
                    this.showPortSelection();
                }
            }

            // Êõ¥Êñ∞ËÆæÂ§á‰ø°ÊÅØÊòæÁ§∫
            updateDeviceInfo(chipName, macAddr, deviceName) {
                const macString = macAddr.map(b => b.toString(16).padStart(2, '0')).join(':').toUpperCase();
                this.deviceInfo.innerHTML = `
                    <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; border-left: 4px solid #4CAF50;">
                        <h4 style="margin: 0 0 8px 0; color: #2e7d32;">üéØ ËÆæÂ§áÂ∑≤ËøûÊé•</h4>
                        <div style="display: grid; grid-template-columns: auto 1fr; gap: 8px 16px; font-size: 0.9em;">
                            <strong>ËäØÁâáÁ±ªÂûã:</strong> <span>${chipName}</span>
                            <strong>MACÂú∞ÂùÄ:</strong> <span style="font-family: monospace;">${macString}</span>
                            <strong>‰∏≤Âè£ËÆæÂ§á:</strong> <span>${deviceName}</span>
                        </div>
                    </div>
                `;
            }

            // Êõ¥Êñ∞UI‰∏∫Â∑≤ËøûÊé•Áä∂ÊÄÅ
            updateUIConnected() {
                this.connectBtn.textContent = 'üîå Êñ≠ÂºÄËøûÊé•';
                this.connectBtn.classList.remove('flashing');
                this.connectBtn.disabled = false;
                this.connectBtn.className = 'btn btn-warning';
                
                this.manualConnectBtn.textContent = 'üîå Êñ≠ÂºÄËøûÊé•';
                this.manualConnectBtn.disabled = false;
                this.manualConnectBtn.style.background = '#dc3545';
                
                this.flashBtn.disabled = false;
                this.eraseBtn.disabled = false;
            }

            // Áù°Áú†ÂáΩÊï∞
            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            async connectDevice() {
                try {
                    // ËÆæÁΩÆËøûÊé•‰∏≠ÁöÑUIÁä∂ÊÄÅ
                    this.connectBtn.disabled = true;
                    this.connectBtn.textContent = 'üîÑ ËøûÊé•‰∏≠...';
                    this.connectBtn.classList.add('flashing');
                    
                    this.log('Ê≠£Âú®ËøûÊé•ËÆæÂ§á...', 'info');
                    
                    if (!navigator.serial) {
                        const isSecureContext = window.isSecureContext;
                        const protocol = window.location.protocol;
                        const hostname = window.location.hostname;
                        
                        let errorMsg = 'ÊµèËßàÂô®‰∏çÊîØÊåÅ Web Serial API„ÄÇ';
                        
                        if (!isSecureContext) {
                            errorMsg += `\nÂéüÂõ†ÔºöÂΩìÂâç‰∏çÊòØÂÆâÂÖ®‰∏ä‰∏ãÊñá (${protocol}//${hostname})`;
                            errorMsg += '\nËß£ÂÜ≥ÊñπÊ°àÔºö';
                            errorMsg += '\n1. ‰ΩøÁî® https:// ÂçèËÆÆËÆøÈóÆ';
                            errorMsg += '\n2. ÊàñÂú®Êú¨Âú∞‰ΩøÁî® http://localhost ËÆøÈóÆ';
                            errorMsg += '\n3. Êàñ‰ΩøÁî® Chrome ÁöÑ --unsafely-treat-insecure-origin-as-secure ÂèÇÊï∞';
                        } else {
                            errorMsg += '\nËØ∑‰ΩøÁî® Chrome 89+ Êàñ Edge 89+ ÊµèËßàÂô®';
                        }
                        
                        throw new Error(errorMsg);
                    }

                    if (!this.selectedPort) {
                        throw new Error('ËØ∑ÂÖàÈÄâÊã©‰∏≤Âè£ËÆæÂ§á');
                    }

                    this.port = this.selectedPort;
                    const transport = new Transport(this.port);
                    this.esploader = new ESPLoader({
                        transport: transport,
                        baudrate: 115200
                    });

                    await this.esploader.main();
                    
                    const chipName = await this.esploader.chip.getChipDescription(this.esploader);
                    const macAddr = await this.esploader.chip.readMac(this.esploader);
                    
                    this.connected = true;
                    this.connectBtn.disabled = false;
                    this.connectBtn.textContent = '‚ö†Ô∏è Êñ≠ÂºÄËøûÊé•';
                    this.connectBtn.className = 'btn btn-warning';
                    this.connectBtn.classList.remove('flashing');
                    this.flashBtn.disabled = false;
                    this.eraseBtn.disabled = false;
                    
                    // ‰ΩøÁî®Êñ∞ÁöÑËÆæÂ§á‰ø°ÊÅØÊòæÁ§∫ÊñπÊ≥ï
                    const selectedPortInfo = this.selectedPort.getInfo();
                    const deviceName = this.getDeviceName(selectedPortInfo);
                    this.updateDeviceInfo(chipName, macAddr, deviceName);
                    
                    this.log(`ËøûÊé•ÊàêÂäü: ${chipName}`, 'success');
                    this.log(`MACÂú∞ÂùÄ: ${macAddr.map(b => b.toString(16).padStart(2, '0')).join(':').toUpperCase()}`, 'info');
                    
                } catch (error) {
                    this.log(`ËøûÊé•Â§±Ë¥•: ${error.message}`, 'error');
                    
                    // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
                    this.connectBtn.disabled = false;
                    this.connectBtn.textContent = 'üîå ËøûÊé•ËÆæÂ§á';
                    this.connectBtn.className = 'btn btn-primary';
                    this.connectBtn.classList.remove('flashing');
                }
            }

            async disconnectDevice() {
                try {
                    if (this.esploader) {
                        await this.esploader.transport.disconnect();
                    }
                    
                    this.connected = false;
                    this.selectedPort = null;
                    
                    // ÈáçÁΩÆ‰∏§‰∏™ËøûÊé•ÊåâÈíÆÁöÑÁä∂ÊÄÅ
                    this.connectBtn.textContent = 'üîå Ëá™Âä®ËøûÊé•';
                    this.connectBtn.className = 'btn btn-primary';
                    this.connectBtn.disabled = false;
                    
                    this.manualConnectBtn.textContent = 'üîç ÊâãÂä®ÈÄâÊã©';
                    this.manualConnectBtn.style.background = '#6c757d';
                    this.manualConnectBtn.disabled = false;
                    
                    this.flashBtn.disabled = true;
                    this.eraseBtn.disabled = true;
                    
                    this.deviceInfo.innerHTML = '';
                    this.log('ËÆæÂ§áÂ∑≤Êñ≠ÂºÄËøûÊé•', 'info');
                    
                } catch (error) {
                    this.log(`Êñ≠ÂºÄËøûÊé•Êó∂Âá∫Èîô: ${error.message}`, 'error');
                }
            }

            async loadFirmwareFiles() {
                try {
                    this.log('Ê≠£Âú®‰ªéfwÊñá‰ª∂Â§πÂä†ËΩΩÂõ∫‰ª∂Êñá‰ª∂...', 'info');
                    
                    // Âõ∫‰ª∂Êñá‰ª∂Ë∑ØÂæÑ
                    const firmwareFiles = [
                        { type: 'bootloader', path: './fw/bootloader.bin', status: this.bootloaderStatus },
                        { type: 'partition', path: './fw/partition-table.bin', status: this.partitionStatus },
                        { type: 'application', path: './fw/robOS.bin', status: this.applicationStatus }
                    ];
                    
                    let loadedCount = 0;
                    
                    for (const fw of firmwareFiles) {
                        try {
                            const response = await fetch(fw.path);
                            if (response.ok) {
                                const arrayBuffer = await response.arrayBuffer();
                                this.files[fw.type] = {
                                    name: fw.path.split('/').pop(),
                                    size: arrayBuffer.byteLength,
                                    data: arrayBuffer
                                };
                                fw.status.textContent = `‚úì ${fw.path.split('/').pop()} (${(arrayBuffer.byteLength / 1024).toFixed(1)} KB)`;
                                fw.status.className = 'file-status file-selected';
                                loadedCount++;
                                this.log(`Â∑≤Âä†ËΩΩ: ${fw.path.split('/').pop()}`, 'success');
                            } else {
                                fw.status.textContent = `‚úó ${fw.path.split('/').pop()} - Âä†ËΩΩÂ§±Ë¥•`;
                                fw.status.className = 'file-status error';
                                this.log(`Âä†ËΩΩÂ§±Ë¥•: ${fw.path}`, 'error');
                            }
                        } catch (error) {
                            fw.status.textContent = `‚úó ${fw.path.split('/').pop()} - Êñá‰ª∂‰∏çÂ≠òÂú®`;
                            fw.status.className = 'file-status error';
                            this.log(`Êñá‰ª∂‰∏çÂ≠òÂú®: ${fw.path}`, 'error');
                        }
                    }
                    
                    if (loadedCount === 3) {
                        this.firmwareStatus.textContent = '‚úì ÊâÄÊúâÂõ∫‰ª∂Êñá‰ª∂Âä†ËΩΩÂÆåÊàêÔºåÂèØ‰ª•ÂºÄÂßãÁÉßÂΩï';
                        this.firmwareStatus.style.color = '#2d5a2d';
                        this.log('ÊâÄÊúâÂõ∫‰ª∂Êñá‰ª∂Âä†ËΩΩÂÆåÊàêÔºÅ', 'success');
                    } else {
                        this.firmwareStatus.textContent = `‚ö† Âè™Âä†ËΩΩ‰∫Ü ${loadedCount}/3 ‰∏™Êñá‰ª∂ÔºåËØ∑Ê£ÄÊü•fwÊñá‰ª∂Â§π`;
                        this.firmwareStatus.style.color = '#d4691a';
                    }
                    
                    this.updateFlashButtonState();
                    
                } catch (error) {
                    this.log(`Âä†ËΩΩÂõ∫‰ª∂Êñá‰ª∂Êó∂Âá∫Èîô: ${error.message}`, 'error');
                    this.firmwareStatus.textContent = '‚úó Âõ∫‰ª∂Êñá‰ª∂Âä†ËΩΩÂ§±Ë¥•';
                    this.firmwareStatus.style.color = '#d32f2f';
                }
            }

            updateFlashButtonState() {
                const hasAllFiles = this.files.bootloader && this.files.partition && this.files.application;
                this.flashBtn.disabled = !this.connected || !hasAllFiles;
            }

            async readFileAsArrayBuffer(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.onerror = reject;
                    reader.readAsArrayBuffer(file);
                });
            }

            updateProgress(current, total, message = '') {
                const percent = Math.round((current / total) * 100);
                this.progressFill.style.width = `${percent}%`;
                this.progressText.textContent = message || `${percent}% (${current}/${total})`;
            }

            async flashFirmware() {
                if (!this.connected || !this.files.bootloader || !this.files.partition || !this.files.application) {
                    this.log('ËØ∑ÂÖàËøûÊé•ËÆæÂ§áÔºåÂõ∫‰ª∂Êñá‰ª∂‰ºö‰ªéfwÊñá‰ª∂Â§πËá™Âä®Âä†ËΩΩ', 'error');
                    return;
                }

                try {
                    this.flashBtn.disabled = true;
                    this.progressContainer.style.display = 'block';
                    this.flashBtn.classList.add('flashing');
                    
                    this.log('ÂºÄÂßãÁÉßÂΩïÂõ∫‰ª∂...', 'info');
                    
                    // Ëé∑ÂèñÊñá‰ª∂Êï∞ÊçÆÔºàÂ∑≤ÁªèÊòØArrayBufferÊ†ºÂºèÔºâ
                    this.log('Ê≠£Âú®ÂáÜÂ§áÊñá‰ª∂Êï∞ÊçÆ...', 'info');
                    const bootloaderData = this.files.bootloader.data;
                    const partitionData = this.files.partition.data;
                    const applicationData = this.files.application.data;
                    
                    // ËΩ¨Êç¢ArrayBuffer‰∏∫Â≠óÁ¨¶‰∏≤Ôºàesptool-jsÈúÄË¶ÅÁöÑÊ†ºÂºèÔºâ
                    const arrayBufferToString = (buffer) => {
                        const bytes = new Uint8Array(buffer);
                        let binary = '';
                        for (let i = 0; i < bytes.byteLength; i++) {
                            binary += String.fromCharCode(bytes[i]);
                        }
                        return binary;
                    };

                    // ÂáÜÂ§áÊñá‰ª∂Êï∞ÁªÑ
                    const fileArray = [
                        {
                            data: arrayBufferToString(bootloaderData),
                            address: 0x0
                        },
                        {
                            data: arrayBufferToString(partitionData),
                            address: 0x8000
                        },
                        {
                            data: arrayBufferToString(applicationData),
                            address: 0x10000
                        }
                    ];

                    this.log(`Bootloader: ${this.files.bootloader.name} (${fileArray[0].data.length} bytes)`, 'info');
                    this.log(`ÂàÜÂå∫Ë°®: ${this.files.partition.name} (${fileArray[1].data.length} bytes)`, 'info');
                    this.log(`Â∫îÁî®Á®ãÂ∫è: ${this.files.application.name} (${fileArray[2].data.length} bytes)`, 'info');
                    
                    // ÁÉßÂΩïÂèÇÊï∞ - Âõ∫ÂÆö‰ºòÂåñÂèÇÊï∞
                    const flashOptions = {
                        fileArray: fileArray,
                        flashSize: '16MB',
                        flashMode: 'dio',
                        flashFreq: '80m',
                        eraseAll: false,
                        compress: true,
                        reportProgress: (fileIndex, written, total) => {
                            const fileName = ['Bootloader', 'ÂàÜÂå∫Ë°®', 'Â∫îÁî®Á®ãÂ∫è'][fileIndex];
                            this.log(`ÁÉßÂΩïËøõÂ∫¶ - ${fileName}: ${written}/${total} bytes (${Math.round((written/total)*100)}%)`, 'info');
                            this.updateProgress(written, total, `ÁÉßÂΩï ${fileName}: ${Math.round((written/total)*100)}%`);
                        },
                        calculateMD5Hash: null
                    };
                    
                    this.log('ÁÉßÂΩïËÆæÁΩÆ: 16MB, DIO, 80MHz (‰ºòÂåñÂèÇÊï∞)', 'info');
                    
                    // ÂºÄÂßãÁÉßÂΩï
                    this.log('ÂºÄÂßãÊâßË°åwriteFlash...', 'info');
                    
                    // ÊâãÂä®Êõ¥Êñ∞UIËøõÂ∫¶ÔºåÂõ†‰∏∫esptoolÂÜÖÈÉ®‰∏ç‰ºöË∞ÉÁî®Êàë‰ª¨ÁöÑÂõûË∞É
                    let currentFile = 0;
                    const totalFiles = fileArray.length;
                    
                    // Ê®°ÊãüËøõÂ∫¶Êõ¥Êñ∞
                    const progressInterval = setInterval(() => {
                        if (currentFile < totalFiles) {
                            const fileName = ['Bootloader', 'ÂàÜÂå∫Ë°®', 'Â∫îÁî®Á®ãÂ∫è'][currentFile];
                            this.updateProgress(currentFile + 1, totalFiles, `Ê≠£Âú®ÁÉßÂΩï ${fileName}...`);
                            currentFile++;
                        }
                    }, 2000);
                    
                    const result = await this.esploader.writeFlash(flashOptions);
                    clearInterval(progressInterval);
                    
                    this.log('esptool-jsÁÉßÂΩïÂÆåÊàêÔºåËØ∑Êü•ÁúãÊéßÂà∂Âè∞Á°ÆËÆ§ËØ¶ÁªÜËøõÂ∫¶', 'info');
                    
                    this.updateProgress(100, 100, 'ÁÉßÂΩïÂÆåÊàê!');
                    this.log('Âõ∫‰ª∂ÁÉßÂΩïÂÆåÊàê!', 'success');
                    
                    // È™åËØÅÁÉßÂΩï
                    this.log('Ê≠£Âú®È™åËØÅÁÉßÂΩïÁªìÊûú...', 'info');
                    try {
                        const flashId = await this.esploader.flashId();
                        this.log(`Flash IDÈ™åËØÅÊàêÂäü`, 'success');
                    } catch (verifyError) {
                        this.log(`È™åËØÅÂ§±Ë¥•: ${verifyError.message}`, 'warning');
                    }
                    
                    // ÈáçÂêØËÆæÂ§á
                    this.log('Ê≠£Âú®ÈáçÂêØËÆæÂ§á‰ª•ËøêË°åÊñ∞Âõ∫‰ª∂...', 'info');
                    try {
                        await this.esploader.hardReset();
                        this.log('ËÆæÂ§áÈáçÂêØÊàêÂäüÔºÅÊñ∞Âõ∫‰ª∂Â∑≤ÂºÄÂßãËøêË°å„ÄÇ', 'success');
                        
                        // ËÆæÂ§áÈáçÂêØÂêéËá™Âä®Êñ≠ÂºÄËøûÊé•Áä∂ÊÄÅ
                        this.connected = false;
                        this.connectBtn.textContent = 'üîå ËøûÊé•ËÆæÂ§á';
                        this.connectBtn.className = 'btn btn-primary';
                        this.flashBtn.disabled = true;
                        this.eraseBtn.disabled = true;
                        this.deviceInfo.innerHTML = '';
                        this.log('ËÆæÂ§áÂ∑≤ÈáçÂêØÔºåËøûÊé•Áä∂ÊÄÅÂ∑≤ÈáçÁΩÆ', 'info');
                        
                    } catch (resetError) {
                        this.log(`ÈáçÂêØÂ§±Ë¥•: ${resetError.message}ÔºåËØ∑ÊâãÂä®ÊåâËÆæÂ§áÂ§ç‰ΩçÊåâÈíÆ`, 'warning');
                        
                        // Âç≥‰ΩøÈáçÂêØÂ§±Ë¥•Ôºå‰πüËÆ§‰∏∫ËøûÊé•Â∑≤Êñ≠ÂºÄ
                        this.connected = false;
                        this.connectBtn.textContent = 'üîå ËøûÊé•ËÆæÂ§á';
                        this.connectBtn.className = 'btn btn-primary';
                        this.flashBtn.disabled = true;
                        this.eraseBtn.disabled = true;
                        this.deviceInfo.innerHTML = '';
                        this.log('ËøûÊé•Áä∂ÊÄÅÂ∑≤ÈáçÁΩÆÔºåËØ∑ÈáçÊñ∞ËøûÊé•ËÆæÂ§á', 'info');
                    }
                    
                } catch (error) {
                    this.log(`ÁÉßÂΩïÂ§±Ë¥•: ${error.message}`, 'error');
                    console.error('Flash error:', error);
                } finally {
                    // Âè™ÊúâÂú®ËÆæÂ§á‰ªçÁÑ∂ËøûÊé•Êó∂ÊâçÂêØÁî®ÁÉßÂΩïÊåâÈíÆ
                    if (this.connected) {
                        this.flashBtn.disabled = false;
                    }
                    this.flashBtn.classList.remove('flashing');
                    
                    setTimeout(() => {
                        this.progressContainer.style.display = 'none';
                        this.updateProgress(0, 100, '');
                    }, 3000);
                }
            }

            async eraseFlash() {
                if (!this.connected) {
                    this.log('ËØ∑ÂÖàËøûÊé•ËÆæÂ§á', 'error');
                    return;
                }

                try {
                    this.eraseBtn.disabled = true;
                    this.log('Ê≠£Âú®Êì¶Èô§Flash...', 'warning');
                    
                    await this.esploader.eraseFlash();
                    
                    this.log('FlashÊì¶Èô§ÂÆåÊàê', 'success');
                    
                } catch (error) {
                    this.log(`Êì¶Èô§Â§±Ë¥•: ${error.message}`, 'error');
                } finally {
                    this.eraseBtn.disabled = false;
                }
            }
        }

        // ÂàùÂßãÂåñÂ∫îÁî®
        document.addEventListener('DOMContentLoaded', () => {
            new RM01Flasher();
        });
    </script>
</body>
</html>